package scanner

import (
	"bufio"
	"fmt"
	"os"
	"os/exec"
	"runtime"
	"strings"

	"github.com/aecwalker/CVETodo-agent/internal/api"
	"github.com/aecwalker/CVETodo-agent/internal/config"
	"github.com/aecwalker/CVETodo-agent/internal/logger"
)

// Scanner interface defines package scanning methods
type Scanner interface {
	Name() string
	IsAvailable() bool
	ScanPackages() ([]api.Package, error)
}

// Manager manages multiple package scanners
type Manager struct {
	scanners []Scanner
	logger   *logger.Logger
	config   *config.Config
}

// New creates a new scanner manager
func New(cfg *config.Config, logger *logger.Logger) *Manager {
	manager := &Manager{
		config: cfg,
		logger: logger,
	}

	// Initialize available scanners
	manager.initializeScanners()

	return manager
}

// initializeScanners initializes all available package scanners
func (m *Manager) initializeScanners() {
	// Available scanner types
	allScanners := map[string]func() Scanner{
		"dpkg": func() Scanner { return NewDpkgScanner(m.logger) },
		"rpm":  func() Scanner { return NewRpmScanner(m.logger) },
		"pip":  func() Scanner { return NewPipScanner(m.logger) },
		"npm":  func() Scanner { return NewNpmScanner(m.logger) },
	}

	// Add enabled and available scanners
	for _, scannerName := range m.config.Scanner.EnabledScanners {
		if scannerFactory, exists := allScanners[scannerName]; exists {
			scanner := scannerFactory()
			if scanner.IsAvailable() {
				m.scanners = append(m.scanners, scanner)
				m.logger.WithComponent("scanner").WithField("scanner", scannerName).Info("scanner enabled")
			} else {
				m.logger.WithComponent("scanner").WithField("scanner", scannerName).Warn("scanner not available on this system")
			}
		}
	}
}

// ScanAllPackages scans for packages using all available scanners
func (m *Manager) ScanAllPackages() ([]api.Package, error) {
	m.logger.WithComponent("scanner").Info("starting package scan")

	var allPackages []api.Package

	for _, scanner := range m.scanners {
		m.logger.WithComponent("scanner").WithField("scanner", scanner.Name()).Info("running scanner")

		packages, err := scanner.ScanPackages()
		if err != nil {
			m.logger.WithComponent("scanner").WithField("scanner", scanner.Name()).WithError(err).Error("scanner failed")
			continue
		}

		m.logger.WithComponent("scanner").
			WithField("scanner", scanner.Name()).
			WithField("package_count", len(packages)).
			Info("scanner completed")

		allPackages = append(allPackages, packages...)
	}

	m.logger.WithComponent("scanner").
		WithField("total_packages", len(allPackages)).
		Info("package scan completed")

	return allPackages, nil
}

// GetSystemInfo retrieves system information
func (m *Manager) GetSystemInfo() api.SystemInfo {
	hostname, _ := os.Hostname()
	
	return api.SystemInfo{
		Hostname:     hostname,
		OS:           runtime.GOOS,
		OSVersion:    getOSVersion(),
		Architecture: runtime.GOARCH,
		KernelVersion: getKernelVersion(),
		AgentVersion: "1.0.0", // TODO: Get from build info
	}
}

// DpkgScanner scans Debian/Ubuntu packages using dpkg
type DpkgScanner struct {
	logger *logger.Logger
}

// NewDpkgScanner creates a new dpkg scanner
func NewDpkgScanner(logger *logger.Logger) *DpkgScanner {
	return &DpkgScanner{logger: logger}
}

func (s *DpkgScanner) Name() string {
	return "dpkg"
}

func (s *DpkgScanner) IsAvailable() bool {
	_, err := exec.LookPath("dpkg-query")
	return err == nil
}

func (s *DpkgScanner) ScanPackages() ([]api.Package, error) {
	cmd := exec.Command("dpkg-query", "-W", "-f=${Package}\t${Version}\t${Architecture}\t${Description}\n")
	output, err := cmd.Output()
	if err != nil {
		return nil, fmt.Errorf("dpkg-query failed: %w", err)
	}

	var packages []api.Package
	scanner := bufio.NewScanner(strings.NewReader(string(output)))
	
	for scanner.Scan() {
		line := scanner.Text()
		fields := strings.Split(line, "\t")
		
		if len(fields) >= 3 {
			pkg := api.Package{
				Name:    fields[0],
				Version: fields[1],
				Type:    "deb",
				Arch:    fields[2],
			}
			if len(fields) >= 4 {
				pkg.Description = fields[3]
			}
			packages = append(packages, pkg)
		}
	}

	return packages, scanner.Err()
}

// RpmScanner scans RPM packages using rpm
type RpmScanner struct {
	logger *logger.Logger
}

// NewRpmScanner creates a new rpm scanner
func NewRpmScanner(logger *logger.Logger) *RpmScanner {
	return &RpmScanner{logger: logger}
}

func (s *RpmScanner) Name() string {
	return "rpm"
}

func (s *RpmScanner) IsAvailable() bool {
	_, err := exec.LookPath("rpm")
	return err == nil
}

func (s *RpmScanner) ScanPackages() ([]api.Package, error) {
	cmd := exec.Command("rpm", "-qa", "--queryformat", "%{NAME}\t%{VERSION}-%{RELEASE}\t%{ARCH}\t%{SUMMARY}\n")
	output, err := cmd.Output()
	if err != nil {
		return nil, fmt.Errorf("rpm query failed: %w", err)
	}

	var packages []api.Package
	scanner := bufio.NewScanner(strings.NewReader(string(output)))
	
	for scanner.Scan() {
		line := scanner.Text()
		fields := strings.Split(line, "\t")
		
		if len(fields) >= 3 {
			pkg := api.Package{
				Name:    fields[0],
				Version: fields[1],
				Type:    "rpm",
				Arch:    fields[2],
			}
			if len(fields) >= 4 {
				pkg.Description = fields[3]
			}
			packages = append(packages, pkg)
		}
	}

	return packages, scanner.Err()
}

// PipScanner scans Python packages using pip
type PipScanner struct {
	logger *logger.Logger
}

// NewPipScanner creates a new pip scanner
func NewPipScanner(logger *logger.Logger) *PipScanner {
	return &PipScanner{logger: logger}
}

func (s *PipScanner) Name() string {
	return "pip"
}

func (s *PipScanner) IsAvailable() bool {
	_, err := exec.LookPath("pip")
	if err != nil {
		_, err = exec.LookPath("pip3")
	}
	return err == nil
}

func (s *PipScanner) ScanPackages() ([]api.Package, error) {
	// Try pip3 first, then pip
	var cmd *exec.Cmd
	if _, err := exec.LookPath("pip3"); err == nil {
		cmd = exec.Command("pip3", "list", "--format=freeze")
	} else {
		cmd = exec.Command("pip", "list", "--format=freeze")
	}

	output, err := cmd.Output()
	if err != nil {
		return nil, fmt.Errorf("pip list failed: %w", err)
	}

	var packages []api.Package
	scanner := bufio.NewScanner(strings.NewReader(string(output)))
	
	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())
		if line == "" || strings.HasPrefix(line, "#") {
			continue
		}
		
		parts := strings.Split(line, "==")
		if len(parts) == 2 {
			packages = append(packages, api.Package{
				Name:    parts[0],
				Version: parts[1],
				Type:    "pip",
			})
		}
	}

	return packages, scanner.Err()
}

// NpmScanner scans Node.js packages using npm
type NpmScanner struct {
	logger *logger.Logger
}

// NewNpmScanner creates a new npm scanner
func NewNpmScanner(logger *logger.Logger) *NpmScanner {
	return &NpmScanner{logger: logger}
}

func (s *NpmScanner) Name() string {
	return "npm"
}

func (s *NpmScanner) IsAvailable() bool {
	_, err := exec.LookPath("npm")
	return err == nil
}

func (s *NpmScanner) ScanPackages() ([]api.Package, error) {
	cmd := exec.Command("npm", "list", "-g", "--depth=0", "--parseable", "--long")
	output, err := cmd.Output()
	if err != nil {
		// npm list might return non-zero exit code even on success
		// Check if we got output anyway
		if len(output) == 0 {
			return nil, fmt.Errorf("npm list failed: %w", err)
		}
	}

	var packages []api.Package
	scanner := bufio.NewScanner(strings.NewReader(string(output)))
	
	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())
		if line == "" {
			continue
		}
		
		// Extract package info from npm list output
		// Format: /path/to/package:package-name@version:description
		parts := strings.Split(line, ":")
		if len(parts) >= 2 {
			nameVersion := parts[1]
			atIndex := strings.LastIndex(nameVersion, "@")
			if atIndex > 0 {
				name := nameVersion[:atIndex]
				version := nameVersion[atIndex+1:]
				
				pkg := api.Package{
					Name:    name,
					Version: version,
					Type:    "npm",
				}
				if len(parts) >= 3 {
					pkg.Description = parts[2]
				}
				packages = append(packages, pkg)
			}
		}
	}

	return packages, scanner.Err()
}

// Helper functions for system info

func getOSVersion() string {
	if runtime.GOOS == "linux" {
		// Try to read from /etc/os-release
		if data, err := os.ReadFile("/etc/os-release"); err == nil {
			lines := strings.Split(string(data), "\n")
			for _, line := range lines {
				if strings.HasPrefix(line, "PRETTY_NAME=") {
					version := strings.Trim(line[12:], `"`)
					return version
				}
			}
		}
	}
	return runtime.GOOS
}

func getKernelVersion() string {
	if runtime.GOOS == "linux" {
		if output, err := exec.Command("uname", "-r").Output(); err == nil {
			return strings.TrimSpace(string(output))
		}
	}
	return ""
} 